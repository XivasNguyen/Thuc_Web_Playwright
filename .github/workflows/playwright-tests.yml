name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - user-registration
          - password-reset
          - product-search
          - shopping-cart

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        environment: [staging]
        include:
          - browser: chromium
            environment: staging
          - browser: firefox
            environment: staging
          - browser: webkit
            environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Create test environment file
      run: |
        echo "BASE_URL=https://demo.nopcommerce.com" >> .env
        echo "ENVIRONMENT=${{ matrix.environment }}" >> .env
        echo "BROWSER=${{ matrix.browser }}" >> .env
        echo "HEADLESS=true" >> .env
        echo "WORKERS=2" >> .env

    - name: Run Playwright tests
      run: |
        if [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
          npm run test:smoke
        elif [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
          npm run test:regression
        elif [ "${{ github.event.inputs.test_suite }}" = "user-registration" ]; then
          npm run test tests/user-registration.spec.ts
        elif [ "${{ github.event.inputs.test_suite }}" = "password-reset" ]; then
          npm run test tests/password-reset.spec.ts
        elif [ "${{ github.event.inputs.test_suite }}" = "product-search" ]; then
          npm run test tests/product-search-discovery.spec.ts
        elif [ "${{ github.event.inputs.test_suite }}" = "shopping-cart" ]; then
          npm run test tests/shopping-cart-checkout.spec.ts
        else
          npm run test
        fi
      env:
        CI: true
        ENVIRONMENT: ${{ matrix.environment }}
        BROWSER: ${{ matrix.browser }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.environment }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-report-${{ matrix.browser }}-${{ matrix.environment }}
        path: test-results/html-report/
        retention-days: 30

    - name: Upload Custom Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: custom-report-${{ matrix.browser }}-${{ matrix.environment }}
        path: test-results/custom-report.html
        retention-days: 30

    - name: Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}-${{ matrix.environment }}
        path: test-results/screenshots/
        retention-days: 30

    - name: Upload Traces
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: traces-${{ matrix.browser }}-${{ matrix.environment }}
        path: test-results/traces/
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Playwright Tests (${{ matrix.browser }}-${{ matrix.environment }})
        path: test-results/junit.xml
        reporter: java-junit

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = 'test-results/results.json';
          
          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { stats } = results;
            
            const body = `## üé≠ Playwright Test Results (${{ matrix.browser }})
            
            | Status | Count |
            |--------|-------|
            | ‚úÖ Passed | ${stats.passed || 0} |
            | ‚ùå Failed | ${stats.failed || 0} |
            | ‚è≠Ô∏è Skipped | ${stats.skipped || 0} |
            | üîÑ Flaky | ${stats.flaky || 0} |
            | ‚è±Ô∏è Duration | ${Math.round((stats.duration || 0) / 1000)}s |
            
            ${stats.failed > 0 ? '‚ùå Some tests failed. Check the detailed report for more information.' : '‚úÖ All tests passed!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  # Merge test results from all browsers
  merge-reports:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-reports

    - name: Merge HTML reports
      run: |
        mkdir -p merged-report
        # Copy all HTML reports to merged directory
        find all-reports -name "*.html" -exec cp {} merged-report/ \;
        
    - name: Upload merged report
      uses: actions/upload-artifact@v4
      with:
        name: merged-playwright-report
        path: merged-report/
        retention-days: 30

  # Deploy reports to GitHub Pages (optional)
  deploy-reports:
    if: github.ref == 'refs/heads/main' && always()
    needs: merge-reports
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Download merged reports
      uses: actions/download-artifact@v4
      with:
        name: merged-playwright-report
        path: ./reports

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./reports

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Notify on failure
  notify-failure:
    if: failure() && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Notify Slack on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'üö® Playwright tests failed on main branch!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance monitoring
  performance-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Run performance tests
      run: npm run test:performance

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: test-results/performance/
        retention-days: 7
